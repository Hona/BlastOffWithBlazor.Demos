@page "/manual"
@using AntDesign
@using TreeViewManually.Data
@inject NotificationService _notice

<BadgeRibbon Text="Manual" Placement="start">
    <Card Bordered>
        Example of a TreeView. <img src="typing.gif" style="height: 50px; margin-left: 50px; border-radius: 5px;"/>
        <Button Type="@ButtonType.Primary" OnClick="@OnClick" Style="margin-left: 50px; ">
            Show log
        </Button>
    </Card>
</BadgeRibbon>

<NodeView Nodes="TreeView" OnItemSelected="@CheckboxChanged" AutoExpandParent="true"/>

@code
{
    List<Node> TreeView { get; set; } = TreeViewManually.Data.TreeView.SampleData;

    string _notificationKey = Guid.NewGuid().ToString();
    List<string> _selectedInfo = new();

    private void CheckboxChanged((Node, bool) selection)
    {
        InvokeAsync(() => AddSelectionInfo($"React to change: {selection.Item1?.Value} to {selection.Item2}<hr/>"));
    }


    private async Task AddSelectionInfo(string message)
    {
        Console.WriteLine(message);
        _selectedInfo.Insert(0, message);
        if (_selectedInfo.Count > 5)
        {
            _selectedInfo.RemoveRange(5, _selectedInfo.Count - 5);
        }
        await _notice.Open(new NotificationConfig()
        {   
            Message = $"({this.GetType().Name}) Selection log (showing last 5)",
            Key = _notificationKey,
            Description = GetSelectedMessages()
        });
    }
    
    private void OnClick()
    {   
        
        RenderFragment btn = @<Button Type="@ButtonType.Primary" OnClick="() => { InvokeAsync(ClearLog); }">
                Clear
            </Button>;

        var task = _notice.Open(new NotificationConfig()
        {
            Message = $"({this.GetType().Name}) Selection log (showing last 5)",
            Key = _notificationKey,
            Duration = 0,
            Description = GetSelectedMessages(),
            NotificationType = NotificationType.Info,
            Btn = btn,
            Style = "width: 500px;"
        });        
    }

    private async Task ClearLog()
    {
        _selectedInfo.Clear();
        await _notice.Open(new NotificationConfig()
        {   
            Message = $"({this.GetType().Name}) Selection log (showing last 5)",
            Key = _notificationKey,
            Description = GetSelectedMessages()
        });
    }

    private string GetSelectedMessages() => String.Join(Environment.NewLine, _selectedInfo);
}
