@page "/antblazor"
@using AntDesign
@using TreeViewComparison.Data
@inject NotificationService _notice

<BadgeRibbon Text="AntBlazor" Placement="start">
    <Card Bordered>
        Example of a TreeView.  <img src="logo.svg" style="width: 50px; margin-left: 50px;"/>
        <Button Type="@ButtonType.Primary" OnClick="@OnClick" Style="margin-left: 50px; ">
            Show log
        </Button>
    </Card>
</BadgeRibbon>

<Tree DefaultExpandAll Draggable Multiple Checkable
      ShowIcon DataSource="TreeView"
      TitleExpression="x => x.DataItem.Value"
      ChildrenExpression="x => x.DataItem.Children"
      KeyExpression="x => x.DataItem.Key"
      OnCheck="CheckboxChanged"
      TItem="Node" 
      AutoExpandParent="true"
      OnDragEnd="e=> { }" >
</Tree>

@code
{
    public List<Node> TreeView { get; set; } = Data.TreeView.SampleData;
    string _notificationKey = Guid.NewGuid().ToString();
    List<string> _selectedInfo = new();

    void CheckboxChanged(TreeEventArgs<Node> e)
	{        
        var children = e.Node.GetParentChildDataItems().Where(x => x.Key == e.Node.DataItem.Key);
        if (children.Count() == 0)
        {            
            InvokeAsync(() => AddSelectionInfo($"React to change: {e.Node.DataItem.Value} to {e.Node.Checked}<hr/>"));  
        }
        else
        {
            //_selectedInfo.Insert(0, $"React to change: {e.Node.DataItem.Value} to {e.Node.Checked}<hr/>");    
            LogChildren(children,  e.Node.Checked);            
            InvokeAsync(() => AddSelectionInfo());
        }
	}

    private void LogChildren(IEnumerable<Node> nodes, bool isChecked)
    {
        if (nodes is not null)
        {
            foreach (var child in nodes)
            {                
                _selectedInfo.Insert(0, $"React to change: {child.Value} to {isChecked}<hr/>");
                LogChildren(child.Children, isChecked);
            }
        }
    }

    private async Task AddSelectionInfo(string? message = null)
    {
        if (message is not null)
        {
            Console.WriteLine(message);
            _selectedInfo.Insert(0, message);
        }
        if (_selectedInfo.Count > 5)
        {
            _selectedInfo.RemoveRange(5, _selectedInfo.Count - 5);
        }

        await _notice.Open(new NotificationConfig()
        {   
            Message = $"({this.GetType().Name}) Selection log (showing last 5)",
            Key = _notificationKey,
            Description = GetSelectedMessages()            
        });
    }

    private void OnClick()
    {   
        
        RenderFragment btn = 
    @<Button Type="@ButtonType.Primary" OnClick="() => { InvokeAsync(ClearLog); }">
                Clear
            </Button>;

        var task = _notice.Open(new NotificationConfig()
        {
            Message = $"({this.GetType().Name}) Selection log (showing last 5)",
            Key = _notificationKey,
            Duration = 0,
            Description = GetSelectedMessages(),
            NotificationType = NotificationType.Info,
            Btn = btn,
            Style = "width: 400px;",
            Placement = NotificationPlacement.BottomRight,
        });        
    }

    private async Task ClearLog()
    {
        _selectedInfo.Clear();
        await _notice.Open(new NotificationConfig()
        {   
            Message = $"({this.GetType().Name}) Selection log  (showing last 5)",
            Key = _notificationKey,
            Description = GetSelectedMessages()
        });
    }

    private string GetSelectedMessages() => String.Join(Environment.NewLine, _selectedInfo);

}
